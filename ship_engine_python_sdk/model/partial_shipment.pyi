# coding: utf-8

"""
    ShipEngine API

    ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

    The version of the OpenAPI document: 1.1.202403202303
    Contact: sales@shipengine.com
    Created by: https://www.shipengine.com/contact/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ship_engine_python_sdk import schemas  # noqa: F401


class PartialShipment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight.

    """


    class MetaOapg:
        
        class properties:
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Tag']:
                        return Tag
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Tag'], typing.List['Tag']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tag':
                    return super().__getitem__(i)
        
            @staticmethod
            def shipment_id() -> typing.Type['SeId']:
                return SeId
        
            @staticmethod
            def carrier_id() -> typing.Type['SeId']:
                return SeId
        
            @staticmethod
            def service_code() -> typing.Type['ServiceCode']:
                return ServiceCode
            
            
            class external_order_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'external_order_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ShipmentItem']:
                        return ShipmentItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ShipmentItem'], typing.List['ShipmentItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ShipmentItem':
                    return super().__getitem__(i)
            
            
            class tax_identifiers(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TaxIdentifier']:
                        return TaxIdentifier
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tax_identifiers':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class external_shipment_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'external_shipment_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class shipment_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shipment_number':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def ship_date() -> typing.Type['Date']:
                return Date
        
            @staticmethod
            def created_at() -> typing.Type['DateTime']:
                return DateTime
        
            @staticmethod
            def modified_at() -> typing.Type['DateTime']:
                return DateTime
        
            @staticmethod
            def shipment_status() -> typing.Type['ShipmentStatus']:
                return ShipmentStatus
        
            @staticmethod
            def ship_to() -> typing.Type['ShippingAddressTo']:
                return ShippingAddressTo
        
            @staticmethod
            def ship_from() -> typing.Type['ShippingAddress']:
                return ShippingAddress
        
            @staticmethod
            def warehouse_id() -> typing.Type['SeIdNullable']:
                return SeIdNullable
        
            @staticmethod
            def return_to() -> typing.Type['ShippingAddress']:
                return ShippingAddress
            
            
            class is_return(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_return':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def confirmation() -> typing.Type['DeliveryConfirmation']:
                return DeliveryConfirmation
        
            @staticmethod
            def customs() -> typing.Type['InternationalShipmentOptionsNullable']:
                return InternationalShipmentOptionsNullable
        
            @staticmethod
            def advanced_options() -> typing.Type['AdvancedShipmentOptions']:
                return AdvancedShipmentOptions
        
            @staticmethod
            def insurance_provider() -> typing.Type['InsuranceProvider']:
                return InsuranceProvider
        
            @staticmethod
            def order_source_code() -> typing.Type['OrderSourceName']:
                return OrderSourceName
            
            
            class packages(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Package']:
                        return Package
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Package'], typing.List['Package']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'packages':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Package':
                    return super().__getitem__(i)
        
            @staticmethod
            def total_weight() -> typing.Type['Weight']:
                return Weight
            
            
            class comparison_rate_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'comparison_rate_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "tags": tags,
                "shipment_id": shipment_id,
                "carrier_id": carrier_id,
                "service_code": service_code,
                "external_order_id": external_order_id,
                "items": items,
                "tax_identifiers": tax_identifiers,
                "external_shipment_id": external_shipment_id,
                "shipment_number": shipment_number,
                "ship_date": ship_date,
                "created_at": created_at,
                "modified_at": modified_at,
                "shipment_status": shipment_status,
                "ship_to": ship_to,
                "ship_from": ship_from,
                "warehouse_id": warehouse_id,
                "return_to": return_to,
                "is_return": is_return,
                "confirmation": confirmation,
                "customs": customs,
                "advanced_options": advanced_options,
                "insurance_provider": insurance_provider,
                "order_source_code": order_source_code,
                "packages": packages,
                "total_weight": total_weight,
                "comparison_rate_type": comparison_rate_type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipment_id"]) -> 'SeId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_id"]) -> 'SeId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_code"]) -> 'ServiceCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_order_id"]) -> MetaOapg.properties.external_order_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_identifiers"]) -> MetaOapg.properties.tax_identifiers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_shipment_id"]) -> MetaOapg.properties.external_shipment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipment_number"]) -> MetaOapg.properties.shipment_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ship_date"]) -> 'Date': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> 'DateTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_at"]) -> 'DateTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipment_status"]) -> 'ShipmentStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ship_to"]) -> 'ShippingAddressTo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ship_from"]) -> 'ShippingAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warehouse_id"]) -> 'SeIdNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["return_to"]) -> 'ShippingAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_return"]) -> MetaOapg.properties.is_return: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmation"]) -> 'DeliveryConfirmation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customs"]) -> 'InternationalShipmentOptionsNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["advanced_options"]) -> 'AdvancedShipmentOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insurance_provider"]) -> 'InsuranceProvider': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_source_code"]) -> 'OrderSourceName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["packages"]) -> MetaOapg.properties.packages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_weight"]) -> 'Weight': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comparison_rate_type"]) -> MetaOapg.properties.comparison_rate_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "shipment_id", "carrier_id", "service_code", "external_order_id", "items", "tax_identifiers", "external_shipment_id", "shipment_number", "ship_date", "created_at", "modified_at", "shipment_status", "ship_to", "ship_from", "warehouse_id", "return_to", "is_return", "confirmation", "customs", "advanced_options", "insurance_provider", "order_source_code", "packages", "total_weight", "comparison_rate_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipment_id"]) -> typing.Union['SeId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_id"]) -> typing.Union['SeId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_code"]) -> typing.Union['ServiceCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_order_id"]) -> typing.Union[MetaOapg.properties.external_order_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_identifiers"]) -> typing.Union[MetaOapg.properties.tax_identifiers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_shipment_id"]) -> typing.Union[MetaOapg.properties.external_shipment_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipment_number"]) -> typing.Union[MetaOapg.properties.shipment_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ship_date"]) -> typing.Union['Date', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union['DateTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_at"]) -> typing.Union['DateTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipment_status"]) -> typing.Union['ShipmentStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ship_to"]) -> typing.Union['ShippingAddressTo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ship_from"]) -> typing.Union['ShippingAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warehouse_id"]) -> typing.Union['SeIdNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["return_to"]) -> typing.Union['ShippingAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_return"]) -> typing.Union[MetaOapg.properties.is_return, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmation"]) -> typing.Union['DeliveryConfirmation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customs"]) -> typing.Union['InternationalShipmentOptionsNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["advanced_options"]) -> typing.Union['AdvancedShipmentOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insurance_provider"]) -> typing.Union['InsuranceProvider', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_source_code"]) -> typing.Union['OrderSourceName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["packages"]) -> typing.Union[MetaOapg.properties.packages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_weight"]) -> typing.Union['Weight', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comparison_rate_type"]) -> typing.Union[MetaOapg.properties.comparison_rate_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "shipment_id", "carrier_id", "service_code", "external_order_id", "items", "tax_identifiers", "external_shipment_id", "shipment_number", "ship_date", "created_at", "modified_at", "shipment_status", "ship_to", "ship_from", "warehouse_id", "return_to", "is_return", "confirmation", "customs", "advanced_options", "insurance_provider", "order_source_code", "packages", "total_weight", "comparison_rate_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
        shipment_id: typing.Union['SeId', schemas.Unset] = schemas.unset,
        carrier_id: typing.Union['SeId', schemas.Unset] = schemas.unset,
        service_code: typing.Union['ServiceCode', schemas.Unset] = schemas.unset,
        external_order_id: typing.Union[MetaOapg.properties.external_order_id, None, str, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, list, tuple, schemas.Unset] = schemas.unset,
        tax_identifiers: typing.Union[MetaOapg.properties.tax_identifiers, list, tuple, None, schemas.Unset] = schemas.unset,
        external_shipment_id: typing.Union[MetaOapg.properties.external_shipment_id, None, str, schemas.Unset] = schemas.unset,
        shipment_number: typing.Union[MetaOapg.properties.shipment_number, None, str, schemas.Unset] = schemas.unset,
        ship_date: typing.Union['Date', schemas.Unset] = schemas.unset,
        created_at: typing.Union['DateTime', schemas.Unset] = schemas.unset,
        modified_at: typing.Union['DateTime', schemas.Unset] = schemas.unset,
        shipment_status: typing.Union['ShipmentStatus', schemas.Unset] = schemas.unset,
        ship_to: typing.Union['ShippingAddressTo', schemas.Unset] = schemas.unset,
        ship_from: typing.Union['ShippingAddress', schemas.Unset] = schemas.unset,
        warehouse_id: typing.Union['SeIdNullable', schemas.Unset] = schemas.unset,
        return_to: typing.Union['ShippingAddress', schemas.Unset] = schemas.unset,
        is_return: typing.Union[MetaOapg.properties.is_return, None, bool, schemas.Unset] = schemas.unset,
        confirmation: typing.Union['DeliveryConfirmation', schemas.Unset] = schemas.unset,
        customs: typing.Union['InternationalShipmentOptionsNullable', schemas.Unset] = schemas.unset,
        advanced_options: typing.Union['AdvancedShipmentOptions', schemas.Unset] = schemas.unset,
        insurance_provider: typing.Union['InsuranceProvider', schemas.Unset] = schemas.unset,
        order_source_code: typing.Union['OrderSourceName', schemas.Unset] = schemas.unset,
        packages: typing.Union[MetaOapg.properties.packages, list, tuple, schemas.Unset] = schemas.unset,
        total_weight: typing.Union['Weight', schemas.Unset] = schemas.unset,
        comparison_rate_type: typing.Union[MetaOapg.properties.comparison_rate_type, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PartialShipment':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            shipment_id=shipment_id,
            carrier_id=carrier_id,
            service_code=service_code,
            external_order_id=external_order_id,
            items=items,
            tax_identifiers=tax_identifiers,
            external_shipment_id=external_shipment_id,
            shipment_number=shipment_number,
            ship_date=ship_date,
            created_at=created_at,
            modified_at=modified_at,
            shipment_status=shipment_status,
            ship_to=ship_to,
            ship_from=ship_from,
            warehouse_id=warehouse_id,
            return_to=return_to,
            is_return=is_return,
            confirmation=confirmation,
            customs=customs,
            advanced_options=advanced_options,
            insurance_provider=insurance_provider,
            order_source_code=order_source_code,
            packages=packages,
            total_weight=total_weight,
            comparison_rate_type=comparison_rate_type,
            _configuration=_configuration,
            **kwargs,
        )

from ship_engine_python_sdk.model.advanced_shipment_options import AdvancedShipmentOptions
from ship_engine_python_sdk.model.date import Date
from ship_engine_python_sdk.model.date_time import DateTime
from ship_engine_python_sdk.model.delivery_confirmation import DeliveryConfirmation
from ship_engine_python_sdk.model.insurance_provider import InsuranceProvider
from ship_engine_python_sdk.model.international_shipment_options_nullable import InternationalShipmentOptionsNullable
from ship_engine_python_sdk.model.order_source_name import OrderSourceName
from ship_engine_python_sdk.model.package import Package
from ship_engine_python_sdk.model.se_id import SeId
from ship_engine_python_sdk.model.se_id_nullable import SeIdNullable
from ship_engine_python_sdk.model.service_code import ServiceCode
from ship_engine_python_sdk.model.shipment_item import ShipmentItem
from ship_engine_python_sdk.model.shipment_status import ShipmentStatus
from ship_engine_python_sdk.model.shipping_address import ShippingAddress
from ship_engine_python_sdk.model.shipping_address_to import ShippingAddressTo
from ship_engine_python_sdk.model.tag import Tag
from ship_engine_python_sdk.model.tax_identifier import TaxIdentifier
from ship_engine_python_sdk.model.weight import Weight
