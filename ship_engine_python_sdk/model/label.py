# coding: utf-8

"""
    ShipEngine API

    ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

    The version of the OpenAPI document: 1.1.202403202303
    Contact: sales@shipengine.com
    Created by: https://www.shipengine.com/contact/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ship_engine_python_sdk import schemas  # noqa: F401


class Label(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A label represents the physical sticker that you affix to a package to ship it.  ShipEngine makes it easy for you to [create labels](https://www.shipengine.com/docs/labels/create-a-label/) and then download them in PDF, PNG, or ZPL format so you can print them.

    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def label_id() -> typing.Type['SeId']:
                return SeId
        
            @staticmethod
            def status() -> typing.Type['LabelStatus']:
                return LabelStatus
        
            @staticmethod
            def shipment_id() -> typing.Type['SeId']:
                return SeId
        
            @staticmethod
            def shipment() -> typing.Type['PartialShipment']:
                return PartialShipment
        
            @staticmethod
            def ship_date() -> typing.Type['Date']:
                return Date
        
            @staticmethod
            def created_at() -> typing.Type['DateTime']:
                return DateTime
        
            @staticmethod
            def shipment_cost() -> typing.Type['MonetaryValue']:
                return MonetaryValue
        
            @staticmethod
            def insurance_cost() -> typing.Type['MonetaryValue']:
                return MonetaryValue
        
            @staticmethod
            def requested_comparison_amount() -> typing.Type['MonetaryValue']:
                return MonetaryValue
            
            
            class tracking_number(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            is_return_label = schemas.BoolSchema
            
            
            class rma_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rma_number':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            is_international = schemas.BoolSchema
        
            @staticmethod
            def batch_id() -> typing.Type['SeId']:
                return SeId
        
            @staticmethod
            def carrier_id() -> typing.Type['SeId']:
                return SeId
        
            @staticmethod
            def charge_event() -> typing.Type['LabelChargeEvent']:
                return LabelChargeEvent
        
            @staticmethod
            def outbound_label_id() -> typing.Type['SeId']:
                return SeId
        
            @staticmethod
            def service_code() -> typing.Type['ServiceCode']:
                return ServiceCode
            test_label = schemas.BoolSchema
        
            @staticmethod
            def package_code() -> typing.Type['PackageCode']:
                return PackageCode
        
            @staticmethod
            def validate_address() -> typing.Type['ValidateAddress']:
                return ValidateAddress
            voided = schemas.BoolSchema
            
            
            class voided_at(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            DateTime,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'voided_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def label_download_type() -> typing.Type['LabelDownloadType']:
                return LabelDownloadType
        
            @staticmethod
            def label_format() -> typing.Type['LabelFormat']:
                return LabelFormat
        
            @staticmethod
            def display_scheme() -> typing.Type['DisplayScheme']:
                return DisplayScheme
        
            @staticmethod
            def label_layout() -> typing.Type['LabelLayout']:
                return LabelLayout
            trackable = schemas.BoolSchema
        
            @staticmethod
            def label_image_id() -> typing.Type['ImageIdNullable']:
                return ImageIdNullable
        
            @staticmethod
            def carrier_code() -> typing.Type['CarrierCode']:
                return CarrierCode
        
            @staticmethod
            def tracking_status() -> typing.Type['TrackingStatus']:
                return TrackingStatus
        
            @staticmethod
            def label_download() -> typing.Type['LabelDownload']:
                return LabelDownload
        
            @staticmethod
            def form_download() -> typing.Type['OptionalLinkNullable']:
                return OptionalLinkNullable
            
            
            class insurance_claim(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            OptionalLink,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'insurance_claim':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def packages() -> typing.Type['LabelPackages']:
                return LabelPackages
            
            
            class alternative_identifiers(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AlternativeIdentifier']:
                        return AlternativeIdentifier
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'alternative_identifiers':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "label_id": label_id,
                "status": status,
                "shipment_id": shipment_id,
                "shipment": shipment,
                "ship_date": ship_date,
                "created_at": created_at,
                "shipment_cost": shipment_cost,
                "insurance_cost": insurance_cost,
                "requested_comparison_amount": requested_comparison_amount,
                "tracking_number": tracking_number,
                "is_return_label": is_return_label,
                "rma_number": rma_number,
                "is_international": is_international,
                "batch_id": batch_id,
                "carrier_id": carrier_id,
                "charge_event": charge_event,
                "outbound_label_id": outbound_label_id,
                "service_code": service_code,
                "test_label": test_label,
                "package_code": package_code,
                "validate_address": validate_address,
                "voided": voided,
                "voided_at": voided_at,
                "label_download_type": label_download_type,
                "label_format": label_format,
                "display_scheme": display_scheme,
                "label_layout": label_layout,
                "trackable": trackable,
                "label_image_id": label_image_id,
                "carrier_code": carrier_code,
                "tracking_status": tracking_status,
                "label_download": label_download,
                "form_download": form_download,
                "insurance_claim": insurance_claim,
                "packages": packages,
                "alternative_identifiers": alternative_identifiers,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_id"]) -> 'SeId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'LabelStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipment_id"]) -> 'SeId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipment"]) -> 'PartialShipment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ship_date"]) -> 'Date': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> 'DateTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipment_cost"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insurance_cost"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_comparison_amount"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_number"]) -> MetaOapg.properties.tracking_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_return_label"]) -> MetaOapg.properties.is_return_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rma_number"]) -> MetaOapg.properties.rma_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_international"]) -> MetaOapg.properties.is_international: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batch_id"]) -> 'SeId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_id"]) -> 'SeId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["charge_event"]) -> 'LabelChargeEvent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outbound_label_id"]) -> 'SeId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_code"]) -> 'ServiceCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test_label"]) -> MetaOapg.properties.test_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["package_code"]) -> 'PackageCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validate_address"]) -> 'ValidateAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voided"]) -> MetaOapg.properties.voided: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voided_at"]) -> MetaOapg.properties.voided_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_download_type"]) -> 'LabelDownloadType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_format"]) -> 'LabelFormat': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_scheme"]) -> 'DisplayScheme': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_layout"]) -> 'LabelLayout': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackable"]) -> MetaOapg.properties.trackable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_image_id"]) -> 'ImageIdNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_code"]) -> 'CarrierCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_status"]) -> 'TrackingStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_download"]) -> 'LabelDownload': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["form_download"]) -> 'OptionalLinkNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insurance_claim"]) -> MetaOapg.properties.insurance_claim: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["packages"]) -> 'LabelPackages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternative_identifiers"]) -> MetaOapg.properties.alternative_identifiers: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label_id", "status", "shipment_id", "shipment", "ship_date", "created_at", "shipment_cost", "insurance_cost", "requested_comparison_amount", "tracking_number", "is_return_label", "rma_number", "is_international", "batch_id", "carrier_id", "charge_event", "outbound_label_id", "service_code", "test_label", "package_code", "validate_address", "voided", "voided_at", "label_download_type", "label_format", "display_scheme", "label_layout", "trackable", "label_image_id", "carrier_code", "tracking_status", "label_download", "form_download", "insurance_claim", "packages", "alternative_identifiers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_id"]) -> typing.Union['SeId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['LabelStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipment_id"]) -> typing.Union['SeId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipment"]) -> typing.Union['PartialShipment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ship_date"]) -> typing.Union['Date', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union['DateTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipment_cost"]) -> typing.Union['MonetaryValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insurance_cost"]) -> typing.Union['MonetaryValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_comparison_amount"]) -> typing.Union['MonetaryValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_number"]) -> typing.Union[MetaOapg.properties.tracking_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_return_label"]) -> typing.Union[MetaOapg.properties.is_return_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rma_number"]) -> typing.Union[MetaOapg.properties.rma_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_international"]) -> typing.Union[MetaOapg.properties.is_international, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batch_id"]) -> typing.Union['SeId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_id"]) -> typing.Union['SeId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["charge_event"]) -> typing.Union['LabelChargeEvent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outbound_label_id"]) -> typing.Union['SeId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_code"]) -> typing.Union['ServiceCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test_label"]) -> typing.Union[MetaOapg.properties.test_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["package_code"]) -> typing.Union['PackageCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validate_address"]) -> typing.Union['ValidateAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voided"]) -> typing.Union[MetaOapg.properties.voided, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voided_at"]) -> typing.Union[MetaOapg.properties.voided_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_download_type"]) -> typing.Union['LabelDownloadType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_format"]) -> typing.Union['LabelFormat', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_scheme"]) -> typing.Union['DisplayScheme', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_layout"]) -> typing.Union['LabelLayout', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackable"]) -> typing.Union[MetaOapg.properties.trackable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_image_id"]) -> typing.Union['ImageIdNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_code"]) -> typing.Union['CarrierCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_status"]) -> typing.Union['TrackingStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_download"]) -> typing.Union['LabelDownload', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["form_download"]) -> typing.Union['OptionalLinkNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insurance_claim"]) -> typing.Union[MetaOapg.properties.insurance_claim, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["packages"]) -> typing.Union['LabelPackages', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternative_identifiers"]) -> typing.Union[MetaOapg.properties.alternative_identifiers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label_id", "status", "shipment_id", "shipment", "ship_date", "created_at", "shipment_cost", "insurance_cost", "requested_comparison_amount", "tracking_number", "is_return_label", "rma_number", "is_international", "batch_id", "carrier_id", "charge_event", "outbound_label_id", "service_code", "test_label", "package_code", "validate_address", "voided", "voided_at", "label_download_type", "label_format", "display_scheme", "label_layout", "trackable", "label_image_id", "carrier_code", "tracking_status", "label_download", "form_download", "insurance_claim", "packages", "alternative_identifiers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        label_id: typing.Union['SeId', schemas.Unset] = schemas.unset,
        status: typing.Union['LabelStatus', schemas.Unset] = schemas.unset,
        shipment_id: typing.Union['SeId', schemas.Unset] = schemas.unset,
        shipment: typing.Union['PartialShipment', schemas.Unset] = schemas.unset,
        ship_date: typing.Union['Date', schemas.Unset] = schemas.unset,
        created_at: typing.Union['DateTime', schemas.Unset] = schemas.unset,
        shipment_cost: typing.Union['MonetaryValue', schemas.Unset] = schemas.unset,
        insurance_cost: typing.Union['MonetaryValue', schemas.Unset] = schemas.unset,
        requested_comparison_amount: typing.Union['MonetaryValue', schemas.Unset] = schemas.unset,
        tracking_number: typing.Union[MetaOapg.properties.tracking_number, str, schemas.Unset] = schemas.unset,
        is_return_label: typing.Union[MetaOapg.properties.is_return_label, bool, schemas.Unset] = schemas.unset,
        rma_number: typing.Union[MetaOapg.properties.rma_number, None, str, schemas.Unset] = schemas.unset,
        is_international: typing.Union[MetaOapg.properties.is_international, bool, schemas.Unset] = schemas.unset,
        batch_id: typing.Union['SeId', schemas.Unset] = schemas.unset,
        carrier_id: typing.Union['SeId', schemas.Unset] = schemas.unset,
        charge_event: typing.Union['LabelChargeEvent', schemas.Unset] = schemas.unset,
        outbound_label_id: typing.Union['SeId', schemas.Unset] = schemas.unset,
        service_code: typing.Union['ServiceCode', schemas.Unset] = schemas.unset,
        test_label: typing.Union[MetaOapg.properties.test_label, bool, schemas.Unset] = schemas.unset,
        package_code: typing.Union['PackageCode', schemas.Unset] = schemas.unset,
        validate_address: typing.Union['ValidateAddress', schemas.Unset] = schemas.unset,
        voided: typing.Union[MetaOapg.properties.voided, bool, schemas.Unset] = schemas.unset,
        voided_at: typing.Union[MetaOapg.properties.voided_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        label_download_type: typing.Union['LabelDownloadType', schemas.Unset] = schemas.unset,
        label_format: typing.Union['LabelFormat', schemas.Unset] = schemas.unset,
        display_scheme: typing.Union['DisplayScheme', schemas.Unset] = schemas.unset,
        label_layout: typing.Union['LabelLayout', schemas.Unset] = schemas.unset,
        trackable: typing.Union[MetaOapg.properties.trackable, bool, schemas.Unset] = schemas.unset,
        label_image_id: typing.Union['ImageIdNullable', schemas.Unset] = schemas.unset,
        carrier_code: typing.Union['CarrierCode', schemas.Unset] = schemas.unset,
        tracking_status: typing.Union['TrackingStatus', schemas.Unset] = schemas.unset,
        label_download: typing.Union['LabelDownload', schemas.Unset] = schemas.unset,
        form_download: typing.Union['OptionalLinkNullable', schemas.Unset] = schemas.unset,
        insurance_claim: typing.Union[MetaOapg.properties.insurance_claim, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        packages: typing.Union['LabelPackages', schemas.Unset] = schemas.unset,
        alternative_identifiers: typing.Union[MetaOapg.properties.alternative_identifiers, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Label':
        return super().__new__(
            cls,
            *args,
            label_id=label_id,
            status=status,
            shipment_id=shipment_id,
            shipment=shipment,
            ship_date=ship_date,
            created_at=created_at,
            shipment_cost=shipment_cost,
            insurance_cost=insurance_cost,
            requested_comparison_amount=requested_comparison_amount,
            tracking_number=tracking_number,
            is_return_label=is_return_label,
            rma_number=rma_number,
            is_international=is_international,
            batch_id=batch_id,
            carrier_id=carrier_id,
            charge_event=charge_event,
            outbound_label_id=outbound_label_id,
            service_code=service_code,
            test_label=test_label,
            package_code=package_code,
            validate_address=validate_address,
            voided=voided,
            voided_at=voided_at,
            label_download_type=label_download_type,
            label_format=label_format,
            display_scheme=display_scheme,
            label_layout=label_layout,
            trackable=trackable,
            label_image_id=label_image_id,
            carrier_code=carrier_code,
            tracking_status=tracking_status,
            label_download=label_download,
            form_download=form_download,
            insurance_claim=insurance_claim,
            packages=packages,
            alternative_identifiers=alternative_identifiers,
            _configuration=_configuration,
            **kwargs,
        )

from ship_engine_python_sdk.model.alternative_identifier import AlternativeIdentifier
from ship_engine_python_sdk.model.carrier_code import CarrierCode
from ship_engine_python_sdk.model.date import Date
from ship_engine_python_sdk.model.date_time import DateTime
from ship_engine_python_sdk.model.display_scheme import DisplayScheme
from ship_engine_python_sdk.model.image_id_nullable import ImageIdNullable
from ship_engine_python_sdk.model.label_charge_event import LabelChargeEvent
from ship_engine_python_sdk.model.label_download import LabelDownload
from ship_engine_python_sdk.model.label_download_type import LabelDownloadType
from ship_engine_python_sdk.model.label_format import LabelFormat
from ship_engine_python_sdk.model.label_layout import LabelLayout
from ship_engine_python_sdk.model.label_packages import LabelPackages
from ship_engine_python_sdk.model.label_status import LabelStatus
from ship_engine_python_sdk.model.monetary_value import MonetaryValue
from ship_engine_python_sdk.model.optional_link import OptionalLink
from ship_engine_python_sdk.model.optional_link_nullable import OptionalLinkNullable
from ship_engine_python_sdk.model.package_code import PackageCode
from ship_engine_python_sdk.model.partial_shipment import PartialShipment
from ship_engine_python_sdk.model.se_id import SeId
from ship_engine_python_sdk.model.service_code import ServiceCode
from ship_engine_python_sdk.model.tracking_status import TrackingStatus
from ship_engine_python_sdk.model.validate_address import ValidateAddress
