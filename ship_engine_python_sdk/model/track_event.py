# coding: utf-8

"""
    ShipEngine API

    ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

    The version of the OpenAPI document: 1.1.202403202303
    Contact: sales@shipengine.com
    Created by: https://www.shipengine.com/contact/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ship_engine_python_sdk import schemas  # noqa: F401


class TrackEvent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A track event
    """


    class MetaOapg:
        required = {
            "occurred_at",
            "carrier_status_code",
            "status_description",
            "status_code",
            "city_locality",
            "state_province",
            "carrier_detail_code",
            "postal_code",
            "carrier_status_description",
        }
        
        class properties:
        
            @staticmethod
            def occurred_at() -> typing.Type['DateTime']:
                return DateTime
            
            
            class city_locality(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 0
            
            
            class state_province(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 2
            
            
            class postal_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 0
            
            
            class carrier_detail_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
        
            @staticmethod
            def status_code() -> typing.Type['StatusCode']:
                return StatusCode
            
            
            class status_description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class carrier_status_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class carrier_status_description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 0
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 0
        
            @staticmethod
            def carrier_occurred_at() -> typing.Type['DateTime']:
                return DateTime
        
            @staticmethod
            def country_code() -> typing.Type['CountryCode']:
                return CountryCode
            
            
            class company_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 0
            
            
            class signer(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 0
            
            
            class event_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 0
            
            
            class latitude(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 90
                    inclusive_minimum = -90
            
            
            class longitude(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 180
                    inclusive_minimum = -180
            __annotations__ = {
                "occurred_at": occurred_at,
                "city_locality": city_locality,
                "state_province": state_province,
                "postal_code": postal_code,
                "carrier_detail_code": carrier_detail_code,
                "status_code": status_code,
                "status_description": status_description,
                "carrier_status_code": carrier_status_code,
                "carrier_status_description": carrier_status_description,
                "description": description,
                "carrier_occurred_at": carrier_occurred_at,
                "country_code": country_code,
                "company_name": company_name,
                "signer": signer,
                "event_code": event_code,
                "latitude": latitude,
                "longitude": longitude,
            }
    
    occurred_at: 'DateTime'
    carrier_status_code: MetaOapg.properties.carrier_status_code
    status_description: MetaOapg.properties.status_description
    status_code: 'StatusCode'
    city_locality: MetaOapg.properties.city_locality
    state_province: MetaOapg.properties.state_province
    carrier_detail_code: MetaOapg.properties.carrier_detail_code
    postal_code: MetaOapg.properties.postal_code
    carrier_status_description: MetaOapg.properties.carrier_status_description
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["occurred_at"]) -> 'DateTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city_locality"]) -> MetaOapg.properties.city_locality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_province"]) -> MetaOapg.properties.state_province: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_detail_code"]) -> MetaOapg.properties.carrier_detail_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_code"]) -> 'StatusCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_description"]) -> MetaOapg.properties.status_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_status_code"]) -> MetaOapg.properties.carrier_status_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_status_description"]) -> MetaOapg.properties.carrier_status_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_occurred_at"]) -> 'DateTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_name"]) -> MetaOapg.properties.company_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signer"]) -> MetaOapg.properties.signer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_code"]) -> MetaOapg.properties.event_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["occurred_at", "city_locality", "state_province", "postal_code", "carrier_detail_code", "status_code", "status_description", "carrier_status_code", "carrier_status_description", "description", "carrier_occurred_at", "country_code", "company_name", "signer", "event_code", "latitude", "longitude", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["occurred_at"]) -> 'DateTime': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city_locality"]) -> MetaOapg.properties.city_locality: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_province"]) -> MetaOapg.properties.state_province: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_detail_code"]) -> MetaOapg.properties.carrier_detail_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_code"]) -> 'StatusCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_description"]) -> MetaOapg.properties.status_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_status_code"]) -> MetaOapg.properties.carrier_status_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_status_description"]) -> MetaOapg.properties.carrier_status_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_occurred_at"]) -> typing.Union['DateTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union['CountryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_name"]) -> typing.Union[MetaOapg.properties.company_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signer"]) -> typing.Union[MetaOapg.properties.signer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_code"]) -> typing.Union[MetaOapg.properties.event_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["occurred_at", "city_locality", "state_province", "postal_code", "carrier_detail_code", "status_code", "status_description", "carrier_status_code", "carrier_status_description", "description", "carrier_occurred_at", "country_code", "company_name", "signer", "event_code", "latitude", "longitude", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        occurred_at: 'DateTime',
        carrier_status_code: typing.Union[MetaOapg.properties.carrier_status_code, str, ],
        status_description: typing.Union[MetaOapg.properties.status_description, str, ],
        status_code: 'StatusCode',
        city_locality: typing.Union[MetaOapg.properties.city_locality, str, ],
        state_province: typing.Union[MetaOapg.properties.state_province, str, ],
        carrier_detail_code: typing.Union[MetaOapg.properties.carrier_detail_code, str, ],
        postal_code: typing.Union[MetaOapg.properties.postal_code, str, ],
        carrier_status_description: typing.Union[MetaOapg.properties.carrier_status_description, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        carrier_occurred_at: typing.Union['DateTime', schemas.Unset] = schemas.unset,
        country_code: typing.Union['CountryCode', schemas.Unset] = schemas.unset,
        company_name: typing.Union[MetaOapg.properties.company_name, str, schemas.Unset] = schemas.unset,
        signer: typing.Union[MetaOapg.properties.signer, str, schemas.Unset] = schemas.unset,
        event_code: typing.Union[MetaOapg.properties.event_code, str, schemas.Unset] = schemas.unset,
        latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TrackEvent':
        return super().__new__(
            cls,
            *args,
            occurred_at=occurred_at,
            carrier_status_code=carrier_status_code,
            status_description=status_description,
            status_code=status_code,
            city_locality=city_locality,
            state_province=state_province,
            carrier_detail_code=carrier_detail_code,
            postal_code=postal_code,
            carrier_status_description=carrier_status_description,
            description=description,
            carrier_occurred_at=carrier_occurred_at,
            country_code=country_code,
            company_name=company_name,
            signer=signer,
            event_code=event_code,
            latitude=latitude,
            longitude=longitude,
            _configuration=_configuration,
            **kwargs,
        )

from ship_engine_python_sdk.model.country_code import CountryCode
from ship_engine_python_sdk.model.date_time import DateTime
from ship_engine_python_sdk.model.status_code import StatusCode
