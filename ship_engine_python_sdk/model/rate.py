# coding: utf-8

"""
    ShipEngine API

    ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

    The version of the OpenAPI document: 1.1.202403202303
    Contact: sales@shipengine.com
    Created by: https://www.shipengine.com/contact/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ship_engine_python_sdk import schemas  # noqa: F401


class Rate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A rate
    """


    class MetaOapg:
        required = {
            "trackable",
            "rate_id",
            "carrier_nickname",
            "warning_messages",
            "other_amount",
            "package_type",
            "error_messages",
            "carrier_id",
            "rate_type",
            "shipping_amount",
            "carrier_friendly_name",
            "service_type",
            "guaranteed_service",
            "insurance_amount",
            "zone",
            "confirmation_amount",
            "service_code",
            "validation_status",
            "negotiated_rate",
            "carrier_code",
        }
        
        class properties:
        
            @staticmethod
            def rate_id() -> typing.Type['SeId']:
                return SeId
        
            @staticmethod
            def rate_type() -> typing.Type['RateType']:
                return RateType
        
            @staticmethod
            def carrier_id() -> typing.Type['SeId']:
                return SeId
        
            @staticmethod
            def shipping_amount() -> typing.Type['MonetaryValue']:
                return MonetaryValue
        
            @staticmethod
            def insurance_amount() -> typing.Type['MonetaryValue']:
                return MonetaryValue
        
            @staticmethod
            def confirmation_amount() -> typing.Type['MonetaryValue']:
                return MonetaryValue
        
            @staticmethod
            def other_amount() -> typing.Type['MonetaryValue']:
                return MonetaryValue
            
            
            class zone(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_minimum = 0
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'zone':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class package_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'package_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            guaranteed_service = schemas.BoolSchema
            negotiated_rate = schemas.BoolSchema
            
            
            class service_type(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class service_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            trackable = schemas.BoolSchema
            
            
            class carrier_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class carrier_nickname(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class carrier_friendly_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
        
            @staticmethod
            def validation_status() -> typing.Type['ValidationStatus']:
                return ValidationStatus
        
            @staticmethod
            def warning_messages() -> typing.Type['RateWarningMessages']:
                return RateWarningMessages
        
            @staticmethod
            def error_messages() -> typing.Type['RateErrorMessages']:
                return RateErrorMessages
        
            @staticmethod
            def requested_comparison_amount() -> typing.Type['MonetaryValue']:
                return MonetaryValue
        
            @staticmethod
            def tax_amount() -> typing.Type['MonetaryValue']:
                return MonetaryValue
            
            
            class delivery_days(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_minimum = 1
        
            @staticmethod
            def estimated_delivery_date() -> typing.Type['Date']:
                return Date
            
            
            class carrier_delivery_days(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class ship_date(
                schemas.DateTimeSchema
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    min_length = 1
            __annotations__ = {
                "rate_id": rate_id,
                "rate_type": rate_type,
                "carrier_id": carrier_id,
                "shipping_amount": shipping_amount,
                "insurance_amount": insurance_amount,
                "confirmation_amount": confirmation_amount,
                "other_amount": other_amount,
                "zone": zone,
                "package_type": package_type,
                "guaranteed_service": guaranteed_service,
                "negotiated_rate": negotiated_rate,
                "service_type": service_type,
                "service_code": service_code,
                "trackable": trackable,
                "carrier_code": carrier_code,
                "carrier_nickname": carrier_nickname,
                "carrier_friendly_name": carrier_friendly_name,
                "validation_status": validation_status,
                "warning_messages": warning_messages,
                "error_messages": error_messages,
                "requested_comparison_amount": requested_comparison_amount,
                "tax_amount": tax_amount,
                "delivery_days": delivery_days,
                "estimated_delivery_date": estimated_delivery_date,
                "carrier_delivery_days": carrier_delivery_days,
                "ship_date": ship_date,
            }
    
    trackable: MetaOapg.properties.trackable
    rate_id: 'SeId'
    carrier_nickname: MetaOapg.properties.carrier_nickname
    warning_messages: 'RateWarningMessages'
    other_amount: 'MonetaryValue'
    package_type: MetaOapg.properties.package_type
    error_messages: 'RateErrorMessages'
    carrier_id: 'SeId'
    rate_type: 'RateType'
    shipping_amount: 'MonetaryValue'
    carrier_friendly_name: MetaOapg.properties.carrier_friendly_name
    service_type: MetaOapg.properties.service_type
    guaranteed_service: MetaOapg.properties.guaranteed_service
    insurance_amount: 'MonetaryValue'
    zone: MetaOapg.properties.zone
    confirmation_amount: 'MonetaryValue'
    service_code: MetaOapg.properties.service_code
    validation_status: 'ValidationStatus'
    negotiated_rate: MetaOapg.properties.negotiated_rate
    carrier_code: MetaOapg.properties.carrier_code
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate_id"]) -> 'SeId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate_type"]) -> 'RateType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_id"]) -> 'SeId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_amount"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insurance_amount"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmation_amount"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other_amount"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zone"]) -> MetaOapg.properties.zone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["package_type"]) -> MetaOapg.properties.package_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guaranteed_service"]) -> MetaOapg.properties.guaranteed_service: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["negotiated_rate"]) -> MetaOapg.properties.negotiated_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_type"]) -> MetaOapg.properties.service_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_code"]) -> MetaOapg.properties.service_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackable"]) -> MetaOapg.properties.trackable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_code"]) -> MetaOapg.properties.carrier_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_nickname"]) -> MetaOapg.properties.carrier_nickname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_friendly_name"]) -> MetaOapg.properties.carrier_friendly_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validation_status"]) -> 'ValidationStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warning_messages"]) -> 'RateWarningMessages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_messages"]) -> 'RateErrorMessages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_comparison_amount"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_amount"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delivery_days"]) -> MetaOapg.properties.delivery_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimated_delivery_date"]) -> 'Date': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_delivery_days"]) -> MetaOapg.properties.carrier_delivery_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ship_date"]) -> MetaOapg.properties.ship_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["rate_id", "rate_type", "carrier_id", "shipping_amount", "insurance_amount", "confirmation_amount", "other_amount", "zone", "package_type", "guaranteed_service", "negotiated_rate", "service_type", "service_code", "trackable", "carrier_code", "carrier_nickname", "carrier_friendly_name", "validation_status", "warning_messages", "error_messages", "requested_comparison_amount", "tax_amount", "delivery_days", "estimated_delivery_date", "carrier_delivery_days", "ship_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate_id"]) -> 'SeId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate_type"]) -> 'RateType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_id"]) -> 'SeId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_amount"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insurance_amount"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmation_amount"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other_amount"]) -> 'MonetaryValue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zone"]) -> MetaOapg.properties.zone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["package_type"]) -> MetaOapg.properties.package_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guaranteed_service"]) -> MetaOapg.properties.guaranteed_service: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["negotiated_rate"]) -> MetaOapg.properties.negotiated_rate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_type"]) -> MetaOapg.properties.service_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_code"]) -> MetaOapg.properties.service_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackable"]) -> MetaOapg.properties.trackable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_code"]) -> MetaOapg.properties.carrier_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_nickname"]) -> MetaOapg.properties.carrier_nickname: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_friendly_name"]) -> MetaOapg.properties.carrier_friendly_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validation_status"]) -> 'ValidationStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warning_messages"]) -> 'RateWarningMessages': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_messages"]) -> 'RateErrorMessages': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_comparison_amount"]) -> typing.Union['MonetaryValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_amount"]) -> typing.Union['MonetaryValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delivery_days"]) -> typing.Union[MetaOapg.properties.delivery_days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimated_delivery_date"]) -> typing.Union['Date', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_delivery_days"]) -> typing.Union[MetaOapg.properties.carrier_delivery_days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ship_date"]) -> typing.Union[MetaOapg.properties.ship_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rate_id", "rate_type", "carrier_id", "shipping_amount", "insurance_amount", "confirmation_amount", "other_amount", "zone", "package_type", "guaranteed_service", "negotiated_rate", "service_type", "service_code", "trackable", "carrier_code", "carrier_nickname", "carrier_friendly_name", "validation_status", "warning_messages", "error_messages", "requested_comparison_amount", "tax_amount", "delivery_days", "estimated_delivery_date", "carrier_delivery_days", "ship_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        trackable: typing.Union[MetaOapg.properties.trackable, bool, ],
        rate_id: 'SeId',
        carrier_nickname: typing.Union[MetaOapg.properties.carrier_nickname, str, ],
        warning_messages: 'RateWarningMessages',
        other_amount: 'MonetaryValue',
        package_type: typing.Union[MetaOapg.properties.package_type, None, str, ],
        error_messages: 'RateErrorMessages',
        carrier_id: 'SeId',
        rate_type: 'RateType',
        shipping_amount: 'MonetaryValue',
        carrier_friendly_name: typing.Union[MetaOapg.properties.carrier_friendly_name, str, ],
        service_type: typing.Union[MetaOapg.properties.service_type, str, ],
        guaranteed_service: typing.Union[MetaOapg.properties.guaranteed_service, bool, ],
        insurance_amount: 'MonetaryValue',
        zone: typing.Union[MetaOapg.properties.zone, None, decimal.Decimal, int, ],
        confirmation_amount: 'MonetaryValue',
        service_code: typing.Union[MetaOapg.properties.service_code, str, ],
        validation_status: 'ValidationStatus',
        negotiated_rate: typing.Union[MetaOapg.properties.negotiated_rate, bool, ],
        carrier_code: typing.Union[MetaOapg.properties.carrier_code, str, ],
        requested_comparison_amount: typing.Union['MonetaryValue', schemas.Unset] = schemas.unset,
        tax_amount: typing.Union['MonetaryValue', schemas.Unset] = schemas.unset,
        delivery_days: typing.Union[MetaOapg.properties.delivery_days, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        estimated_delivery_date: typing.Union['Date', schemas.Unset] = schemas.unset,
        carrier_delivery_days: typing.Union[MetaOapg.properties.carrier_delivery_days, str, schemas.Unset] = schemas.unset,
        ship_date: typing.Union[MetaOapg.properties.ship_date, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Rate':
        return super().__new__(
            cls,
            *args,
            trackable=trackable,
            rate_id=rate_id,
            carrier_nickname=carrier_nickname,
            warning_messages=warning_messages,
            other_amount=other_amount,
            package_type=package_type,
            error_messages=error_messages,
            carrier_id=carrier_id,
            rate_type=rate_type,
            shipping_amount=shipping_amount,
            carrier_friendly_name=carrier_friendly_name,
            service_type=service_type,
            guaranteed_service=guaranteed_service,
            insurance_amount=insurance_amount,
            zone=zone,
            confirmation_amount=confirmation_amount,
            service_code=service_code,
            validation_status=validation_status,
            negotiated_rate=negotiated_rate,
            carrier_code=carrier_code,
            requested_comparison_amount=requested_comparison_amount,
            tax_amount=tax_amount,
            delivery_days=delivery_days,
            estimated_delivery_date=estimated_delivery_date,
            carrier_delivery_days=carrier_delivery_days,
            ship_date=ship_date,
            _configuration=_configuration,
            **kwargs,
        )

from ship_engine_python_sdk.model.date import Date
from ship_engine_python_sdk.model.monetary_value import MonetaryValue
from ship_engine_python_sdk.model.rate_error_messages import RateErrorMessages
from ship_engine_python_sdk.model.rate_type import RateType
from ship_engine_python_sdk.model.rate_warning_messages import RateWarningMessages
from ship_engine_python_sdk.model.se_id import SeId
from ship_engine_python_sdk.model.validation_status import ValidationStatus
