# coding: utf-8

"""
    ShipEngine API

    ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

    The version of the OpenAPI document: 1.1.202403202303
    Contact: sales@shipengine.com
    Created by: https://www.shipengine.com/contact/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ship_engine_python_sdk import schemas  # noqa: F401


class AdvancedShipmentOptions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Advanced shipment options
    """


    class MetaOapg:
        
        class properties:
            
            
            class bill_to_account(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bill_to_account':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class bill_to_country_code(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            CountryCode,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'bill_to_country_code':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def bill_to_party() -> typing.Type['BillToPartyNullable']:
                return BillToPartyNullable
            
            
            class bill_to_postal_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bill_to_postal_code':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            contains_alcohol = schemas.BoolSchema
            delivered_duty_paid = schemas.BoolSchema
            dry_ice = schemas.BoolSchema
        
            @staticmethod
            def dry_ice_weight() -> typing.Type['WeightNullable']:
                return WeightNullable
            non_machinable = schemas.BoolSchema
            saturday_delivery = schemas.BoolSchema
        
            @staticmethod
            def fedex_freight() -> typing.Type['AdvancedShipmentOptionsFedexFreight']:
                return AdvancedShipmentOptionsFedexFreight
            
            
            class use_ups_ground_freight_pricing(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'use_ups_ground_freight_pricing':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class freight_class(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'freight_class':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class custom_field1(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_field1':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class custom_field2(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_field2':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class custom_field3(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_field3':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def origin_type() -> typing.Type['OriginTypeNullable']:
                return OriginTypeNullable
            
            
            class additional_handling(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additional_handling':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class shipper_release(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shipper_release':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def collect_on_delivery() -> typing.Type['CollectOnDelivery']:
                return CollectOnDelivery
            third_party_consignee = schemas.BoolSchema
            dangerous_goods = schemas.BoolSchema
        
            @staticmethod
            def dangerous_goods_contact() -> typing.Type['AdvancedShipmentOptionsDangerousGoodsContact']:
                return AdvancedShipmentOptionsDangerousGoodsContact
            __annotations__ = {
                "bill_to_account": bill_to_account,
                "bill_to_country_code": bill_to_country_code,
                "bill_to_party": bill_to_party,
                "bill_to_postal_code": bill_to_postal_code,
                "contains_alcohol": contains_alcohol,
                "delivered_duty_paid": delivered_duty_paid,
                "dry_ice": dry_ice,
                "dry_ice_weight": dry_ice_weight,
                "non_machinable": non_machinable,
                "saturday_delivery": saturday_delivery,
                "fedex_freight": fedex_freight,
                "use_ups_ground_freight_pricing": use_ups_ground_freight_pricing,
                "freight_class": freight_class,
                "custom_field1": custom_field1,
                "custom_field2": custom_field2,
                "custom_field3": custom_field3,
                "origin_type": origin_type,
                "additional_handling": additional_handling,
                "shipper_release": shipper_release,
                "collect_on_delivery": collect_on_delivery,
                "third_party_consignee": third_party_consignee,
                "dangerous_goods": dangerous_goods,
                "dangerous_goods_contact": dangerous_goods_contact,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill_to_account"]) -> MetaOapg.properties.bill_to_account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill_to_country_code"]) -> MetaOapg.properties.bill_to_country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill_to_party"]) -> 'BillToPartyNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill_to_postal_code"]) -> MetaOapg.properties.bill_to_postal_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contains_alcohol"]) -> MetaOapg.properties.contains_alcohol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delivered_duty_paid"]) -> MetaOapg.properties.delivered_duty_paid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dry_ice"]) -> MetaOapg.properties.dry_ice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dry_ice_weight"]) -> 'WeightNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["non_machinable"]) -> MetaOapg.properties.non_machinable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saturday_delivery"]) -> MetaOapg.properties.saturday_delivery: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fedex_freight"]) -> 'AdvancedShipmentOptionsFedexFreight': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_ups_ground_freight_pricing"]) -> MetaOapg.properties.use_ups_ground_freight_pricing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freight_class"]) -> MetaOapg.properties.freight_class: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_field1"]) -> MetaOapg.properties.custom_field1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_field2"]) -> MetaOapg.properties.custom_field2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_field3"]) -> MetaOapg.properties.custom_field3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origin_type"]) -> 'OriginTypeNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_handling"]) -> MetaOapg.properties.additional_handling: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipper_release"]) -> MetaOapg.properties.shipper_release: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collect_on_delivery"]) -> 'CollectOnDelivery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["third_party_consignee"]) -> MetaOapg.properties.third_party_consignee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dangerous_goods"]) -> MetaOapg.properties.dangerous_goods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dangerous_goods_contact"]) -> 'AdvancedShipmentOptionsDangerousGoodsContact': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bill_to_account", "bill_to_country_code", "bill_to_party", "bill_to_postal_code", "contains_alcohol", "delivered_duty_paid", "dry_ice", "dry_ice_weight", "non_machinable", "saturday_delivery", "fedex_freight", "use_ups_ground_freight_pricing", "freight_class", "custom_field1", "custom_field2", "custom_field3", "origin_type", "additional_handling", "shipper_release", "collect_on_delivery", "third_party_consignee", "dangerous_goods", "dangerous_goods_contact", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill_to_account"]) -> typing.Union[MetaOapg.properties.bill_to_account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill_to_country_code"]) -> typing.Union[MetaOapg.properties.bill_to_country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill_to_party"]) -> typing.Union['BillToPartyNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill_to_postal_code"]) -> typing.Union[MetaOapg.properties.bill_to_postal_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contains_alcohol"]) -> typing.Union[MetaOapg.properties.contains_alcohol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delivered_duty_paid"]) -> typing.Union[MetaOapg.properties.delivered_duty_paid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dry_ice"]) -> typing.Union[MetaOapg.properties.dry_ice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dry_ice_weight"]) -> typing.Union['WeightNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["non_machinable"]) -> typing.Union[MetaOapg.properties.non_machinable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saturday_delivery"]) -> typing.Union[MetaOapg.properties.saturday_delivery, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fedex_freight"]) -> typing.Union['AdvancedShipmentOptionsFedexFreight', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_ups_ground_freight_pricing"]) -> typing.Union[MetaOapg.properties.use_ups_ground_freight_pricing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freight_class"]) -> typing.Union[MetaOapg.properties.freight_class, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_field1"]) -> typing.Union[MetaOapg.properties.custom_field1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_field2"]) -> typing.Union[MetaOapg.properties.custom_field2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_field3"]) -> typing.Union[MetaOapg.properties.custom_field3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origin_type"]) -> typing.Union['OriginTypeNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_handling"]) -> typing.Union[MetaOapg.properties.additional_handling, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipper_release"]) -> typing.Union[MetaOapg.properties.shipper_release, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collect_on_delivery"]) -> typing.Union['CollectOnDelivery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["third_party_consignee"]) -> typing.Union[MetaOapg.properties.third_party_consignee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dangerous_goods"]) -> typing.Union[MetaOapg.properties.dangerous_goods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dangerous_goods_contact"]) -> typing.Union['AdvancedShipmentOptionsDangerousGoodsContact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bill_to_account", "bill_to_country_code", "bill_to_party", "bill_to_postal_code", "contains_alcohol", "delivered_duty_paid", "dry_ice", "dry_ice_weight", "non_machinable", "saturday_delivery", "fedex_freight", "use_ups_ground_freight_pricing", "freight_class", "custom_field1", "custom_field2", "custom_field3", "origin_type", "additional_handling", "shipper_release", "collect_on_delivery", "third_party_consignee", "dangerous_goods", "dangerous_goods_contact", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bill_to_account: typing.Union[MetaOapg.properties.bill_to_account, None, str, schemas.Unset] = schemas.unset,
        bill_to_country_code: typing.Union[MetaOapg.properties.bill_to_country_code, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        bill_to_party: typing.Union['BillToPartyNullable', schemas.Unset] = schemas.unset,
        bill_to_postal_code: typing.Union[MetaOapg.properties.bill_to_postal_code, None, str, schemas.Unset] = schemas.unset,
        contains_alcohol: typing.Union[MetaOapg.properties.contains_alcohol, bool, schemas.Unset] = schemas.unset,
        delivered_duty_paid: typing.Union[MetaOapg.properties.delivered_duty_paid, bool, schemas.Unset] = schemas.unset,
        dry_ice: typing.Union[MetaOapg.properties.dry_ice, bool, schemas.Unset] = schemas.unset,
        dry_ice_weight: typing.Union['WeightNullable', schemas.Unset] = schemas.unset,
        non_machinable: typing.Union[MetaOapg.properties.non_machinable, bool, schemas.Unset] = schemas.unset,
        saturday_delivery: typing.Union[MetaOapg.properties.saturday_delivery, bool, schemas.Unset] = schemas.unset,
        fedex_freight: typing.Union['AdvancedShipmentOptionsFedexFreight', schemas.Unset] = schemas.unset,
        use_ups_ground_freight_pricing: typing.Union[MetaOapg.properties.use_ups_ground_freight_pricing, None, bool, schemas.Unset] = schemas.unset,
        freight_class: typing.Union[MetaOapg.properties.freight_class, None, str, schemas.Unset] = schemas.unset,
        custom_field1: typing.Union[MetaOapg.properties.custom_field1, None, str, schemas.Unset] = schemas.unset,
        custom_field2: typing.Union[MetaOapg.properties.custom_field2, None, str, schemas.Unset] = schemas.unset,
        custom_field3: typing.Union[MetaOapg.properties.custom_field3, None, str, schemas.Unset] = schemas.unset,
        origin_type: typing.Union['OriginTypeNullable', schemas.Unset] = schemas.unset,
        additional_handling: typing.Union[MetaOapg.properties.additional_handling, None, bool, schemas.Unset] = schemas.unset,
        shipper_release: typing.Union[MetaOapg.properties.shipper_release, None, bool, schemas.Unset] = schemas.unset,
        collect_on_delivery: typing.Union['CollectOnDelivery', schemas.Unset] = schemas.unset,
        third_party_consignee: typing.Union[MetaOapg.properties.third_party_consignee, bool, schemas.Unset] = schemas.unset,
        dangerous_goods: typing.Union[MetaOapg.properties.dangerous_goods, bool, schemas.Unset] = schemas.unset,
        dangerous_goods_contact: typing.Union['AdvancedShipmentOptionsDangerousGoodsContact', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdvancedShipmentOptions':
        return super().__new__(
            cls,
            *args,
            bill_to_account=bill_to_account,
            bill_to_country_code=bill_to_country_code,
            bill_to_party=bill_to_party,
            bill_to_postal_code=bill_to_postal_code,
            contains_alcohol=contains_alcohol,
            delivered_duty_paid=delivered_duty_paid,
            dry_ice=dry_ice,
            dry_ice_weight=dry_ice_weight,
            non_machinable=non_machinable,
            saturday_delivery=saturday_delivery,
            fedex_freight=fedex_freight,
            use_ups_ground_freight_pricing=use_ups_ground_freight_pricing,
            freight_class=freight_class,
            custom_field1=custom_field1,
            custom_field2=custom_field2,
            custom_field3=custom_field3,
            origin_type=origin_type,
            additional_handling=additional_handling,
            shipper_release=shipper_release,
            collect_on_delivery=collect_on_delivery,
            third_party_consignee=third_party_consignee,
            dangerous_goods=dangerous_goods,
            dangerous_goods_contact=dangerous_goods_contact,
            _configuration=_configuration,
            **kwargs,
        )

from ship_engine_python_sdk.model.advanced_shipment_options_dangerous_goods_contact import AdvancedShipmentOptionsDangerousGoodsContact
from ship_engine_python_sdk.model.advanced_shipment_options_fedex_freight import AdvancedShipmentOptionsFedexFreight
from ship_engine_python_sdk.model.bill_to_party_nullable import BillToPartyNullable
from ship_engine_python_sdk.model.collect_on_delivery import CollectOnDelivery
from ship_engine_python_sdk.model.country_code import CountryCode
from ship_engine_python_sdk.model.origin_type_nullable import OriginTypeNullable
from ship_engine_python_sdk.model.weight_nullable import WeightNullable
